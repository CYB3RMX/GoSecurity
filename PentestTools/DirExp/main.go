package main

import (
	"bufio"
	"flag"
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/cheggaaa/pb/v3"
)

func GetWords(flname string) []string {
	// Wordlist variable
	var wrdlst []string

	// Open and read wordlist file
	content, err := os.Open(flname)
	if err != nil {
		return nil
	}
	defer content.Close()

	// Read file line by line
	scann := bufio.NewScanner(content)
	for scann.Scan() {
		wrdlst = append(wrdlst, scann.Text())
	}
	return wrdlst
}

func ReqScan(endp string, url string) (bool, string) {
	// Check last char of url
	var newurl string
	if url[len(url)-1:] == "/" {
		newurl = url + endp
	} else {
		newurl = url + "/" + endp
	}

	// Making request
	resp, err := http.Get(newurl)
	if err != nil {
		return false, ""
	}
	defer resp.Body.Close()

	// If request succeeded
	if resp.StatusCode == 200 || resp.StatusCode == 301 {
		retstr := fmt.Sprintf("[*] URL: %s | Status: %d\n", newurl, resp.StatusCode)
		return true, retstr
	} else {
		return false, ""
	}
}

func main() {
	var (
		target_url string
		wordlist   string
	)
	var banner = `
	______ _      _____           
	|  _  (_)    |  ___|          
	| | | |_ _ __| |____  ___ __  
	| | | | |  __|  __\ \/ /  _ \
	| |/ /| | |  | |___>  <| |_) |
	|___/ |_|_|  \____/_/\_\ .__/    > Simple directory brute-force tool
	                       | |    
        	               |_|    @CYB3RMX https://github.com/CYB3RMX
	`
	fmt.Println(banner)

	// Defining program arguments
	flag.StringVar(&target_url, "target", "http://example.com", "Specify url to crawl.")
	flag.StringVar(&wordlist, "wordlist", "common.txt", "Specify wordlist to use.")
	flag.Parse()

	// Lets scann!!
	wrdlst := GetWords(wordlist)
	count := 20
	index := 0

	// Progressbar implementation
	fmt.Printf("[!] DirExp is scanning for directories now. Please wait!!\n\n")
	bar := pb.StartNew(len(wrdlst) / 20)
	for elem := 0; elem <= len(wrdlst)/20; elem++ {
		for i := index; i < count; i++ {
			go func(i int) {
				state, conn := ReqScan(wrdlst[i], target_url)
				if state {
					fmt.Print(conn)
				}
			}(i)
		}
		index = count
		count = count + 20
		bar.Increment()
		time.Sleep(time.Second * 1)
	}
}
